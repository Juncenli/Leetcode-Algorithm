Question Number,Question Name,Tag,Time Using,Conclusion,Complexity,URL
217,Contains Duplicate,"Array, HashSet",1mins,set.add() 的简单运用,Time O(n) Space O(n),https://leetcode.com/problems/contains-duplicate/description/
242,Valid Anagram,"Array, HashSet",1mins,,,https://leetcode.com/problems/valid-anagram/description/
1,Two Sum,"Array, HashSet",1mins,,,https://leetcode.com/problems/two-sum/description/
49,Group Anagrams,"Array, HashSet",2mins,可以用char[] arr来记录cnt，这样new string的时候 可以直接用,,https://leetcode.com/problems/group-anagrams/description/
347,Top K Frequent Elements,"Array, QuickSelect",12mins,quickSelect 模版题,Time O(n) Space O(n),https://leetcode.com/problems/top-k-frequent-elements/description/
238,Product of Array Except Self,Array,"8mins

一开始res[i] indicates: 左边的product except itself

注意两个for loop的起始值","    public int[] productExceptSelf(int[] nums) {
        int len = nums.length;
        int[] res = new int[len];
        res[0] = 1;
        // [1, 1, 2, 6]
        for (int i = 1; i < len; i++) {
            res[i] = res[i - 1] * nums[i - 1];
        }
        int rightProduct = 1;
        // [24, 12, 8, 6]
        for (int i = len - 2; i >= 0; i--) {
            rightProduct *= nums[i + 1];
            res[i] *= rightProduct;
        }
        return res;
    }",,https://leetcode.com/problems/product-of-array-except-self/
36,Valid Sudoku,Array,6mins,"开辟额外数组来进行记录

遇到重复，那么return false","Time O(1) Space O(1)

constant",https://leetcode.com/problems/valid-sudoku/
271,Encode and Decode Strings,String,"8mins

len + delimiter + word

s.indexOf(”Delimiter”, startIdx)","    public String encode(List<String> strs) {
        StringBuilder sb = new StringBuilder();
        for (String str : strs) {
            int len = str.length();
            sb.append(len).append(""/"").append(str);
        }
        return sb.toString();
    }

    // Decodes a single string to a list of strings.
    public List<String> decode(String s) {
        int idxEnd = 0;
        List<String> res = new ArrayList<>();
        while (idxEnd < s.length()) {
            int idxDelimiter = s.indexOf(""/"", idxEnd);
            // 5/word1
            int len = Integer.parseInt(s.substring(idxEnd, idxDelimiter));
            idxEnd = idxDelimiter + len + 1;
            String word = s.substring(idxDelimiter + 1, idxEnd);
            res.add(word);
        }
        return res;
    }",,
128,Longest Consecutive Sequence,"Array, HashSet","3mins

","注意edge case 原本数组可能为空

所以初始化 int maxLen = 0;",Time O(n) Space O(n),https://leetcode.com/problems/longest-consecutive-sequence/description/
125,Valid Palindrome,"String, Two Pointer",1mins,,,
167,Two Sum II - Input Array Is Sorted,Two Pointer,3mins,"sort 过后的 一定得想到two point来逼近

另外一个是二分法",Time O(n) Space O(1),https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/
15,3Sum,Two Pointer,8mins,"注意去重

使用 continue 和 while

while (left < right && nums[right] == nums[--right]);

while (left < right && nums[left] == nums[++left]);

因为right和left本来就要移动，所以可以使用此写法",Time O(nlogn+n^2),https://leetcode.com/problems/3sum/
11,Container With Most Water,Two Pointer,2mins,"当宽变小，只有高点大，才能使得面积变大的可能

所以pointer移动规则，height低的移动",Time O(n) Space O(1),https://leetcode.com/problems/container-with-most-water/description/
,,,"Forgot the details

首尾双指针保持左右边界高度","    public int trap(int[] height) {
        int len = height.length;
        int left = 0, right = len - 1;
        int sum = 0;
        int leftMax = 0, rightMax = 0;
        // 首尾双指针，为了保持左右高度的边界
        while (left < right) {
            leftMax = Math.max(leftMax, height[left]);
            rightMax = Math.max(rightMax, height[right]);
            // 在脑海中构造接雨水的过程
            if (leftMax <= rightMax) {
                // 取小的且移动
                sum += leftMax - height[left];
                left++;
            } else {
                sum += rightMax - height[right];
                right--;
            }
        }
        return sum;
    }",,
,,,,,,
,,,,,,
,,,,,,
,,,,,,